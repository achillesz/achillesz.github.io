--- 
layout: post
title: "ruby 语法"
date:   2016-01-29 15:29:11
categories: [ruby]
tags: [ruby语法]
---

边忘边学，先从基本的规则开始。

1. 命名规则：以小写字母或者下划线开头；

2. Ruby中的方法调用也是以小写字母或下划线开头，而且调用的方法如果没有参数，则可以省略方法后的括号；


3. 局部变量的定义：类、模块、方法的内部，当我们对一个以小写字母开头的变量进行赋值时，就声明了一个局部变量；离开范围局部变量消失；

4. 允许定义顶层局部变量，但在类、方法、模块定义内仍无法访问该变量；

5. 局部变量不可以在内部类、子类中访问；类中的方法不可以访问该类中定义的局部变量（平级）；；

6. 在声明局部变量的类、模块、方法内，局部变量从声明该变量处开始生效，随类、方法、模块的定义结束而结束

<!-- more -->

```ruby

	who = 'zy'
    
    class Person
      puts who
    end
   
```

```ruby

	who = 'zy'

	module Hello
	  puts who
	end
   
```

```ruby

	who = 'zy'
    
    def access_who
      puts who
    end
    
    access_who
    
```


#### 全局变量

1. 命名规则：以“$”开头；可以在任何地方访问；

2. 通常应避免使用全局变量，因为它的使用会引起各模块间的高耦合。

3. 全局变量无需声明，引用尚未初始化的全局变量，其值为nil；

4. 定义：可以在类、模块、方法的定义中进行全局变量的定义；

5. 全局变量的作用范围是从全局变量的定义语句开始，直到程序结束；

6. 动态语言的特征：当定义一个方法时，该方法根本不会被解释，只有真正调用该方法时，该方法才会被解释。

7. Ruby提供了一系列常用的全局变量；如；错误为止，解释器进程ID；

#### 实例变量

实例变量；

1. 命名规则：以“@”开头；每个实例变量都是在第一次出现时动态加入对象；

2. 实例变量通常在方法中定义；

    当在方法中声明实例变量时，该实例变量事实上属于该方法所在的类，而不是该方法；

    虽然实例变量是属于类的，但大部分时候我们都是在该类的方法里定义实例变量；

3. Java在创建对象时一次为该对象的所有实例变量都分配了相应的内存空间；

　 Ruby语言里的对象完全是动态的，创建对象时该对象没有任何实例变量，直到执行到为实例变量定义时，该对象才动态增加该实例变量；

4. 生存范围：与该类对象的生存范围相同，只要该类对象存在，则该对象里的实例变量将一直存在；

    但局部变量则会随着方法的消亡而消亡（除非使用闭包）；

5. 实例变量的访问范围总是：private，即在类定义内对实例变量的赋值和读取没有限制；在类外访问实例变量时，则可以通过方法来访问；

6. 属性定义：1.用实例变量；2.用Module的方法（四个方法：attr，attr_reader，attr_writer，attr_accessor；示例：attr：color，true；）；

7. 在模块中定义实例变量，目的是将该实例变量混入其他类中；（模块是无法创建实例的）；

8. 类范围内定义的实例变量是Class对象的实例变量；

9. 实例变量永远都不能暴露为public，只能通过类方法（类名.方法名）暴露；






---
layout: post
title:  "js继承解释"
keywords: 面向对象的javascript,js继承实现
description: 面向对象的javascript,js继承实现
date:   2015-09-11 15:51:36
categories: [js]
tags: 继承
---


1. Son 类实例化一个对象，new 应该需要做几件事，创造一个空对象，执行类函数，类函数的this指向空对象，无返回值，默认返回该对象。

2. 生成的实例对象有个constructor，指向类（构造它的）。

3. 生成的实例对象应该有个_proto_指向类的原型对象的_proto_ 

4. 每一个函数都应该有一个原型对象，属性constructor,应该指向类自身。类创建的对象的constructor应该与这里的constructor保持一致。

<!-- more -->
 
如何印证上面所说的？

	第一条说明
 
{% highlight js %}

	function Son() {
	}; 
	
	var son1 = new Son(); 
	
{% endhighlight %}

Son {}  只能证明返回一个空对象

{% highlight js %}

	function Son() {
		this.a = 1
	}; 
	
	var son1 = new Son();
	
{% endhighlight %}

Son {a: 1}  证明函数执行 this指向

	第二条说明

```js
	son1.constructor
	function Son() {this.a = 1};
```

	第三条说明

```js
	son1._proto_ === Son.prototype._proto_
	true
```

	第四条说明

```js
	son1.constructor == Son && Son == Son.prototype.constructor
	true
```

下面讨论继承

* 一种是类抄写
* 一种是原型继承

	类抄写的优点是，查找速度快。缺点是，浪费空间
	
	原型式继承的优点是，查找是嵌套结构，但是只保存一份引用
	
```js

	function Son() { 
		this.constructor = arguments.callee;
		this.b = 2;
	};
	
	function Parent() { 
		this.a = 1
	}; 
	 
	Parent.prototype.sayName= function() { 
		console.log('febbc');
	}; 
	    
	Son.prototype = new Parent(); 
	Son.prototype.sayName = function() {
		console.log(1);
	}; 
	
	son1 = new Son();
```

最佳继承方式：

```js

	$.inherits = function(childCtor, parentCtor) {
		function tempCtor() {};
		tempCtor.prototype = parentCtor.prototype;
		childCtor.superClass_ = parentCtor.prototype;
		childCtor.prototype = new tempCtor();
		childCtor.prototype.constructor = childCtor;
	};
	
	function Parent() { 
		this.a = 1
	};
	
	Parent.prototype.sayName= function() { 
		console.log('febbc');
	}; 
		
	function Son() { 
		Parent.call(this);
		//this.constructor = arguments.callee;
		this.b = 2;
	};
	
	$.inherits(Son, Parent);

	Son.prototype.sayName = function() {
		Son.superClass_.sayName.call(this);
		console.log(1);
	}; 
	
	var son1 = new Son();
	
	son1.sayName();
	
```

* 为何要有个空函数？
* 为何要用call?
* 为何子类要保存父类的原型？
* 为何要重置constructor?

今天看另一份源码的时候发现另一个问题:

```js
        lang.inherits = function(subClass, superClass) {

            var Empty = function() {};
            Empty.prototype = superClass.prototype;
            var selfPrototype = subClass.prototype;
            var proto = subClass.prototype = new Empty();

            for (var key in selfPrototype) {
                proto[key] = selfPrototype[key];//可能出现引用传递的问题
            }
            subClass.prototype.constructor = subClass;
            subClass.superClass = superClass.prototype;

            return subClass;
        };
```

之前的继承,会有继承之前不能添加原型,会有顺序要求,而可以通过暂时保存,覆盖之后,再遍历回去。代码如上。









		

		

	
